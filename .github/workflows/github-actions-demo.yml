name: Sync Languages and Upload Translation Files

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up curl and jq
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq

    - name: Fetch current languages from PoEditor
      env:
        API_TOKEN: ${{ secrets.POEDITOR_API_TOKEN }}  # Reference to the secret API token
        PROJECT_ID: ${{ secrets.POEDITOR_PROJECT_ID }}  # Reference to the secret project ID
      run: |
        echo "Fetching current languages from PoEditor..."
        current_languages=$(curl -s -X POST https://api.poeditor.com/v2/languages/list \
          -d api_token="$API_TOKEN" \
          -d id="$PROJECT_ID" | jq -r '.result.languages[].language')

        echo "Current languages in PoEditor:"
        echo "$current_languages"
        
        # Store the current languages to a file for later use
        echo "$current_languages" > current_languages.txt

    - name: Sync Languages: Add or Remove
      env:
        API_TOKEN: ${{ secrets.POEDITOR_API_TOKEN }}
        PROJECT_ID: ${{ secrets.POEDITOR_PROJECT_ID }}
      run: |
        echo "Syncing languages with the repository..."
        
        # Get the list of language directories in i18n/ (e.g., en, es, fr)
        repo_languages=$(ls -d i18n/*/ | sed 's#i18n/##;s#/##')
        
        echo "Languages in the repository:"
        echo "$repo_languages"

        # Read the current languages from the previous step
        current_languages=$(cat current_languages.txt)

        # Add languages that are in the repo but not in PoEditor
        for lang in $repo_languages; do
          if [[ ! "$current_languages" =~ "$lang" ]]; then
            echo "Adding language: $lang"
            retry=0
            max_retries=3
            success=false
            while [[ $retry -lt $max_retries && $success == false ]]; do
              response=$(curl -s -w "%{http_code}" -o /dev/null -X POST https://api.poeditor.com/v2/languages/add \
                -d api_token="$API_TOKEN" \
                -d id="$PROJECT_ID" \
                -d language="$lang")
              if [[ $response -eq 200 ]]; then
                echo "Successfully added language: $lang"
                success=true
              else
                echo "Failed to add language: $lang. Retrying... ($((retry+1))/$max_retries)"
                ((retry++))
                sleep 5  # Wait before retrying
              fi
            done
          fi
        done

        # Delete languages that are in PoEditor but not in the repo
        for lang in $current_languages; do
          if [[ ! "$repo_languages" =~ "$lang" ]]; then
            echo "Deleting language: $lang"
            retry=0
            max_retries=3
            success=false
            while [[ $retry -lt $max_retries && $success == false ]]; do
              response=$(curl -s -w "%{http_code}" -o /dev/null -X POST https://api.poeditor.com/v2/languages/delete \
                -d api_token="$API_TOKEN" \
                -d id="$PROJECT_ID" \
                -d language="$lang")
              if [[ $response -eq 200 ]]; then
                echo "Successfully deleted language: $lang"
                success=true
              else
                echo "Failed to delete language: $lang. Retrying... ($((retry+1))/$max_retries)"
                ((retry++))
                sleep 5  # Wait before retrying
              fi
            done
          fi
        done

    - name: Upload Translation Files
      env:
        API_TOKEN: ${{ secrets.POEDITOR_API_TOKEN }}  # Reference to the secret API token
        PROJECT_ID: ${{ secrets.POEDITOR_PROJECT_ID }}  # Reference to the secret project ID
      run: |
        echo "Uploading translation files for each language..."

        # Iterate over all language directories and upload terms/translation files
        for lang_dir in i18n/*; do
          if [[ -d "$lang_dir" ]]; then
            lang_code=$(basename "$lang_dir")
            echo "Uploading terms/translation files for language: $lang_code"

            # Iterate over all files in the language directory
            for file in "$lang_dir"/*; do
              if [[ -f "$file" ]]; then
                echo "Uploading file: $file for language: $lang_code"
                retry=0
                max_retries=3
                success=false
                while [[ $retry -lt $max_retries && $success == false ]]; do
                  response=$(curl -s -w "%{http_code}" -o /dev/null -X POST https://api.poeditor.com/v2/projects/upload \
                    -F api_token="$API_TOKEN" \
                    -F id="$PROJECT_ID" \
                    -F updating="terms_translations" \
                    -F file=@"$file" \
                    -F language="$lang_code" \
                    -F tags="{\"obsolete\":\"removed-strings\"}")
                  if [[ $response -eq 200 ]]; then
                    echo "Successfully uploaded file: $file for language: $lang_code"
                    success=true
                  else
                    echo "Failed to upload file: $file for language: $lang_code. Retrying... ($((retry+1))/$max_retries)"
                    ((retry++))
                    sleep 5  # Wait before retrying
                  fi
                done
                # Sleep for 20 seconds to avoid hitting API rate limit
                echo "Sleeping for 20 seconds to avoid rate limit..."
                sleep 20
              fi
            done
          fi
        done
